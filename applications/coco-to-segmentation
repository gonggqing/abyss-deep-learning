#!/usr/bin/env python3
import argparse
import copy
import json
import logging
import os
import sys
from numbers import Number
from typing import Union

import numpy as np
from PIL import Image
from skimage.draw import polygon
from skimage.morphology import dilation, square

__author__ = 'Kent Hu'
__maintainer__ = 'Kent Hu'

_DESCRIPTION = """
The utility takes in a coco file of images and segmentation annotation 
and produces mask files of segmentations for each image in a similar structure to fabric-segmentation-predict. 

One directory per mask file will be produced. 

Mask file format will be either png or bin, default is bin. 

If bin, values of the bin file are just category id of pixel. 
If png, values of the pixels are category ids normalized from 0 to 255. 
If both, output JSON will contain image entries with path to the png files.

Assumes category id of segmentations range from 1 to --num-classes <n>.

A coco file of images of each mask will be produced and dumped to stdout

examples:
    cat coco.json | coco-to-segmentation --save-as png > masks.json # produce png mask files
    cat coco.json | coco-to-segmentation --save-as bin > masks.json # produce bin mask files
    
    cat coco.json | coco-to-segmentation --save-as bin --output-format uint32 # produce 4 byte values for each pixel
"""


def main(args: argparse.Namespace):
    logging.basicConfig(format='%(filename)s: %(asctime)s.%(msecs)03d: %(levelname)s: %(lineno)s: %(message)s',
                        datefmt='%Y-%m-%d %H:%M:%S',
                        level=args.loglevel)
    try:
        if args.depth != 1:
            raise NotImplementedError("--depth has not yet been implemented")
    except NotImplementedError as e:
        logging.warning(e)

    # Empty file check
    buffer = sys.stdin.read().strip()
    if buffer:
        try:
            coco = json.loads(buffer)
        except json.decoder.JSONDecodeError as e:
            logging.critical("Malformed JSON passed in")
            raise e
    else:
        logging.CRITICAL("Expecting input from stdin: received empty characters {}".format(repr(buffer)))
        return 1

    assert isinstance(coco.get('images', []), list)
    assert isinstance(coco.get('annotations', []), list)

    image_id_to_ann_id = {}
    for i, annotation in enumerate(coco.get('annotations', [])):
        try:
            image_id_to_ann_id[annotation['image_id']].append(i)
        except KeyError:
            try:
                image_id_to_ann_id[annotation['image_id']] = []
                image_id_to_ann_id[annotation['image_id']].append(i)
            except KeyError:
                logging.error("Annotation {} is missing key <image_id>".format(annotation))
    save_bin = args.save_as == 'bin' or args.save_as == 'both'
    save_png = args.save_as == 'png' or args.save_as == 'both'
    output = {
        "images": [],
        "annotations": coco['annotations'] if args.keep_annotations else [],
        "categories": coco['categories']
    }
    for image_entry in coco.get('images', []):
        try:
            # todo: use args.depth
            dir_name, _ = os.path.splitext(os.path.basename(str(image_entry[args.dirname])))
            os.makedirs(dir_name, mode=0o755, exist_ok=args.permissive)
        except OSError:
            logging.error("Directory name {} exists, please use --permissive to overwrite".format(dir_name))
            return 1
        img = load_entry(image_entry)
        if not image_entry['id'] in image_id_to_ann_id:
            logging.info("image {} with id: {} does not have annotations; skipped".format(image_entry['path'],
                                                                                          image_entry['id']))
            continue
        for annotation_id in image_id_to_ann_id[image_entry['id']]:
            annotation = coco['annotations'][annotation_id]
            for segmentation in annotation.get('segmentation', [[]]):
                segmentation = [int(round(i)) for i in segmentation]
                row = segmentation[1::2]
                column = segmentation[::2]
                img[polygon(row, column)] = annotation['category_id']
                img[row, column] = annotation['category_id']
        bin_path = png_path = None
        if save_bin:
            bin_path = save_as_bin(img.astype(args.output_format), dir_name)
        if save_png:
            png_path = save_as_png(Image.fromarray(normalize(img, args.num_classes)), dir_name)
        path = png_path if bin_path is None else bin_path
        entry = copy.deepcopy(image_entry)
        entry['file_name'] = os.path.basename(path)
        entry['path'] = path
        output['images'].append(entry)
    json.dump(output, sys.stdout, indent=4)
    logging.shutdown()
    return 0


def save_as_bin(img: np.ndarray, dir_name: str):
    path = os.path.join(dir_name, '0.bin')
    img.tofile(path)
    return path


def save_as_png(img: Image.Image, dir_name: str):
    path = os.path.join(dir_name, '0.png')
    img.save(path)
    return path


def load_entry(image_entry: dict) -> Union[np.ndarray, None]:
    """

    Args:
        image_entry: Dictionary style image entry in COCO format

    Returns:
        np.ndarray representation of image normalized from 0 to 1. If file extension is not valid, returns None
    """
    try:
        width, height = Image.open(image_entry.get('path')).size
    except AttributeError:
        try:
            # Cast to float in case width or height is a float string then round to nearest integer
            width = round(float(image_entry['width']), None)
            height = round(float(image_entry['height']), None)
        except KeyError:
            logging.error(
                "Could not generate a mask file as neither image could be found nor height and width were provided")
            return None
    finally:
        return np.zeros((height, width), dtype=np.uint8)


def normalize(arr: np.ndarray, max_val: Number = None) -> np.ndarray:
    """
    Linear normalization from 0 to 255
    http://en.wikipedia.org/wiki/Normalization_%28image_processing%29
    """
    arr = arr.astype(float)
    # Do not touch the alpha channel
    min_val = arr.min()
    if max_val is None:
        max_val = arr.max()
    return arr.astype(np.uint8) if min_val == max_val else ((arr - min_val) * (255.0 / (max_val - min_val))).astype(np.uint8)


def get_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description=_DESCRIPTION, formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('--depth', type=int, default=1,
                        help="TODO! depth to name output directories, e.g. --depth 1: 'a/b/c/d' -> 'd', --depth 3: 'a/b/c/d' -> 'b/c/d' etc")
    parser.add_argument('--dirname', '--dir', choices=['id', 'file_name'], default='file_name',
                        help="Naming scheme for image directory. Default is %(default)s")
    parser.add_argument('-n', '--num-classes', type=int, required=True,
                        help="Number of possible classes that can be detected from the network (excluding background).")
    parser.add_argument('-i', '--input',
                        help="Pass COCO JSON as command line argument. If specified, does not read from stdin.")
    parser.add_argument('-s', '--save-as', choices=['bin', 'png', 'both'], default='bin',
                        help="File type to save mask as. Default is %(default)s")
    parser.add_argument('-f', '--output-format', type=str, choices=np.sctypeDict.keys(), default='uint32',
                        help="Specify output data type of bin file. Default is %(default)s")
    parser.add_argument('--keep-annotations', action='store_true',
                        help="Keep original annotations in the output coco")
    parser.add_argument('-p', '--permissive', action='store_true',
                        help="Permissive option to potentially overwrite mask file in a directory if it already exists for an image")
    logging_group = parser.add_mutually_exclusive_group()
    logging_group.add_argument('-v', '--verbose', action='store_const', const=logging.INFO, dest='loglevel',
                               help="Verbose output to stderr")
    logging_group.add_argument('-d', '--debug', action='store_const', const=logging.DEBUG, dest='loglevel',
                               help="Debug output to stderr")
    return parser.parse_args()


if __name__ == '__main__':
    sys.exit(main(get_args()))
