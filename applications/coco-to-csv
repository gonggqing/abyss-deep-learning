#!/usr/bin/env python3
import argparse
import os
from math import floor
from pycocotools.coco import COCO
from sys import stderr
# import importlib.util

def export_csv(image, annotations, args):
    for annotation in annotations:
        file_name = ','.join(image['file_name'].split('.')[:-1])
        if args.verbose:
            print(file_name, file=stderr)

        with open(os.path.join(args.annotation_dir, file_name + '.csv'), 'a') as file_handle:
            output_string = []
            for field_name in args.fields:
                if field_name == 'bbox':
                    output_string += [str(floor(i)) for i in annotation['bbox']]
                elif field_name == 'filename':
                    output_string += [image['file_name']]
                else:
                    output_string += [str(annotation[field_name])]
            file_handle.write(','.join(output_string) + "\n")

def coco_to_csv(args):
    assert os.path.exists(args.coco_path), "COCO file not found."
    coco = COCO(args.coco_path)
    if not os.path.exists(args.annotation_dir):
        os.mkdir(args.annotation_dir)
    for image_id, image in coco.imgs.items():
        annotations = coco.loadAnns(coco.getAnnIds(imgIds=[image_id]))
        export_csv(image, annotations, args)

def get_args():
    parser = argparse.ArgumentParser(
        description="Convert a COCO JSON into CSV"
    )
    parser.add_argument('coco_path', help="Path to the coco JSON.")
    # parser.add_argument('image_dir', help="Path the images are stored in")
    parser.add_argument('annotation_dir', help="Path to output the annotations")
    parser.add_argument(
        '--fields', default='id,bbox,category_id',
        help="Override output fields (CSV list of any annotation key, or 'filename')"
    )
    parser.add_argument('--verbose', action='store_true', help="verbose output to stderr")
    args = parser.parse_args()
    args.fields = args.fields.split(',')
    return args

if __name__ == '__main__':
    coco_to_csv(get_args())
