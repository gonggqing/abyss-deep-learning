#!/usr/bin/env python3
from __future__ import print_function
from contextlib import redirect_stdout
from sys import stderr
import argparse
import json
import os
import sys

from matplotlib.collections import PatchCollection
from matplotlib.patches import Polygon
from pycocotools import mask as COCOmask
from pycocotools.coco import COCO
from abyss_deep_learning.utils import imread
import matplotlib.pyplot as plt
import numpy as np

from abyss.bedrock.filesystem.utils import search_path

from skimage.color import rgb_colors
COLORS = {color: getattr(rgb_colors, color) for color in dir(rgb_colors) if not color.startswith("_")}
# COLOR_MAP = [COLORS[color] for color in "aqua,coral,violet,blue,red,gold,magenta,green,honeydew".split(",")]
COLOR_MAP = list(COLORS.values())


def bounding_box(polygon):
    '''return the bounding box of a given polygon'''
    min_x, min_y = np.min(polygon, axis=0)
    max_x, max_y = np.max(polygon, axis=0)
    return [(min_x, min_y), (min_x, max_y), (max_x, max_y), (max_x, min_y)]


def poly_from_bbox(bbox):
    min_x, min_y = bbox[0], bbox[1]
    max_x, max_y = bbox[0] + bbox[2], bbox[1] + bbox[3]
    return [(min_x, min_y), (min_x, max_y), (max_x, max_y), (max_x, min_y)]


def showAnns(self, anns, cat_map, use_bbox=True, use_segm=True, use_text=True):
    """
    Display the specified annotations.
    :param anns (array of object): annotations to display
    :return: None
    """
    if len(anns) == 0:
        return 0
    if 'segmentation' in anns[0] or 'keypoints' in anns[0]:
        dataset_type = 'instances'
    elif 'caption' in anns[0]:
        dataset_type = 'captions'
    else:
        raise Exception('dataset_type not supported')
    if dataset_type == 'instances':
        axis = plt.gca()
        axis.set_autoscale_on(False)
        polygons = []
        colors = []
        for ann in anns:
            # color = (np.random.random((1, 3))*0.6+0.4).tolist()[0]
            color = COLOR_MAP[ann['category_id']]
            bbox = np.asarray(poly_from_bbox(ann['bbox'])) if 'bbox' in ann else None
            if use_text and (use_segm or use_bbox):
                axis.text(np.mean(bbox[:, 0]), np.mean(bbox[:, 1]), cat_map[ann['category_id']])
            if bbox is not None and use_bbox:
                polygons.append(Polygon(bbox))
                colors.append(color)
            if 'segmentation' in ann and use_segm:
                if type(ann['segmentation']) == list: # polygon
                    for seg in ann['segmentation']:
                        poly = np.array(seg).reshape((int(len(seg)/2), 2))
                        polygons.append(Polygon(poly))
                        colors.append(color)
                else: # mask
                    t = self.imgs[ann['image_id']]
                    if type(ann['segmentation']['counts']) == list:
                        rle = COCOmask.frPyObjects(
                            [ann['segmentation']], t['height'], t['width'])
                    else:
                        rle = [ann['segmentation']]
                    m = COCOmask.decode(rle)
                    img = np.ones((m.shape[0], m.shape[1], 3))
                    if ann['iscrowd'] == 1:
                        color_mask = np.array([2.0, 166.0, 101.0]) / 255
                    else:
                        color_mask = color
                    for i in range(3):
                        img[:, :, i] = color_mask[i]
                    axis.imshow(np.dstack((img, m * 0.5)))
            if 'keypoints' in ann and type(ann['keypoints']) == list:
                # turn skeleton into zero-based index
                sks = np.array(self.loadCats(
                    ann['category_id'])[0]['skeleton'])-1
                kp = np.array(ann['keypoints'])
                x = kp[0::3]
                y = kp[1::3]
                v = kp[2::3]
                for sk in sks:
                    if np.all(v[sk] > 0):
                        plt.plot(x[sk], y[sk], linewidth=3, color=color)
                plt.plot(x[v > 0], y[v > 0], 'o', markersize=8,
                         markerfacecolor=color, markeredgecolor='k', markeredgewidth=2)
                plt.plot(x[v > 1], y[v > 1], 'o', markersize=8,
                         markerfacecolor=color, markeredgecolor=color, markeredgewidth=2)
        # p = PatchCollection(polygons, facecolor=color, linewidths=0, alpha=0.4)
        # axis.add_collection(p)
        p = PatchCollection(polygons, facecolor='none', edgecolors=colors, linewidths=2)
        axis.add_collection(p)
    elif dataset_type == 'captions':
        for ann in anns:
            info(ann['caption'])


def info(string):
    print(string, file=stderr)


def foreach_coco_image(dataset, function):
    image_ids = dataset.getImgIds()
    images = dataset.loadImgs(image_ids)
    for image in images:
        annotations = dataset.loadAnns(dataset.getAnnIds(imgIds=[image['id']]))
        function(dataset, image, annotations)


def calculate_rgb_means(dataset, image_dir=None):
    '''Calculate the pixel color means in the dataset'''
    means = []
    def _calc_rgb(_dataset, image, _annotations):
        image_path = image['path'] if 'path' in image else os.path.join(
            image_dir, image['file_name'])
        info(image_path, file=sys.stderr)
        output_size = (image['height'], image['width'])
        rgb = imread(image_path, size=output_size)
        means.append(np.mean(rgb, axis=(0, 1)))
    foreach_coco_image(dataset, _calc_rgb)
    return np.mean(np.array(means), axis=0).tolist()


def coco_info(dataset, args):
    if args.verbose:
        info(args)
    db_info = {
        'num_images': len(dataset.imgs),
        'num_annotations': len(dataset.anns),
        'num_categories': len(dataset.cats),
        'category_names': [cat['name'] for cat in dataset.cats.values()],
        'category_ids': [cat['id'] for cat in dataset.cats.values()]
    }
    if args.rgb_means:
        db_info['rgb_means'] = calculate_rgb_means(
            dataset, image_dir=args.image_dir)
    info(json.dumps(db_info))


def main(args):
    with redirect_stdout(sys.stderr):
        coco_db = COCO(args.coco_path)
    args.info = True if args.rgb_means else args.info
    if args.info:
        coco_info(coco_db, args)
        return
    cat_map = {cat['id']: cat['name'] for cat in coco_db.loadCats(coco_db.getCatIds())}
    img_ids = coco_db.getImgIds(imgIds=args.ids, catIds=args.cats)
    # image_sets = [coco_db.getImgIds(catIds=cat) for cat in args.cats]
    # img_ids = list(set([j for i in image_sets for j in i]))
    images = coco_db.loadImgs(ids=img_ids)
    ann_types = args.annotation_type.lower().split(',')
    if not images:
        info("No images with given ids and cats")
        exit(0)
    info("Categories:")
    info(coco_db.loadCats(args.cats))
    info("Loaded {:d} images".format(len(images)))
    for _i, image in enumerate(images):
        image_path = image.get('path', None) or image['file_name']
        image_path = search_path(image_path, args.image_dir)
        output_size = (image['width'], image['height'])
        rgb = imread(image_path, size=output_size)
        assert rgb.shape[0] == image['height'], "Image height does not match data height"
        assert rgb.shape[1] == image['width'], "Image width does not match data height"
        ann_ids = coco_db.getAnnIds(imgIds=[image['id']], catIds=args.cats)
        annotations = coco_db.loadAnns(ids=ann_ids)
        if not annotations:
            info("skipping {:s} cause of 0 annotations".format(
                image['file_name']))
            continue
        info("[{:s} \"{:s}\"] {:d} annotations".format(
            str(image['id']), image['file_name'], len(annotations)))
        if not args.dontshow:
            plt.figure(figsize=(15, 11))
            plt.imshow(rgb)
            try:
                showAnns(coco_db, annotations, cat_map,
                    use_bbox=('bbox' in ann_types),
                    use_segm=('segm' in ann_types),
                    use_text=('text' in ann_types))
                plt.title("[{:s}] {:s}".format(
                    str(image['id']), image['file_name']))
            except Exception as e:
                plt.title("ERROR [{:s}] {:s}".format(
                    str(image['id']), image['file_name']))
                plt.show()
                raise
            plt.show()


def get_args():
    '''Get args from the command line args'''
    parser = argparse.ArgumentParser(
        description="Extract labels from COCO JSON and dump them in to annotation images")
    parser.add_argument("coco_path", help="The coco JSON to parse.")
    parser.add_argument(
        "--ids", help="View this image ID, if not given then view all.", default='')
    parser.add_argument(
        "--cats", help="Filter images by categories, CSV-delimited", default='')
    parser.add_argument(
        "--dontshow", help="Filter images by categories, CSV-delimited", action='store_true')
    parser.add_argument(
        "--info", help="info coco info and exit", action='store_true')
    parser.add_argument(
        "--rgb-means", help="info coco rgb means (implies --info)", action='store_true')
    parser.add_argument(
        "--image-dir", help="If images referenced relatively, give the iamge dir", default='.')
    parser.add_argument(
        "--verbose", help="info extra --info", action='store_true')
    parser.add_argument(
        "--annotation-type", help="CSV list of annotation types to show {bbox, segm, text}; default 'text,bbox,segm'", type=str, default='text,bbox,segm')
    args = parser.parse_args()
    args.ids = [int(i) for i in args.ids.split(',') if len(i)]
    args.cats = [int(i) for i in args.cats.split(',') if len(i)]
    assert [i in ['bbox', 'segm', 'text', ''] for i in args.annotation_type.lower().split(",")]
    return args


if __name__ == '__main__':
    main(get_args())
