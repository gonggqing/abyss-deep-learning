#!/usr/bin/env python3
import argparse
import json
import os
import sys

DESCRIPTION = \
"""
Read coco file from stdin and re-path all images.

Output coco json contents in stdout.

examples:
    cat coco.json | {0} images
    cat coco.json | {0} /mnt/rhino/processed/industry-data/anadarko/images
""".format(os.path.basename(__file__))


def main():
    global ARGS
    ARGS = get_args()
    say("loading dataset")
    dataset = load_dataset(sys.stdin.read())
    try:
        for image in dataset['images']:
            if 'path' in image:
                image['path'] = os.path.join(ARGS.path, os.path.basename(image['path']))
            elif 'file_name' in image:
                image['path'] = os.path.join(ARGS.path, os.path.basename(image['file_name']))
    except KeyError as e:
        die("could not find key [{}] in dataset".format(str(e)))

    json.dump(dataset, sys.stdout, indent=ARGS.indent)
    say("done")
    sys.exit()


def get_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description=DESCRIPTION, formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('path', type=str, help="New path to prepend to each image in data set")
    parser.add_argument('-m', '--min', action='store_const', help="Output minimised json", const=None, default=4,
                        dest='indent')
    parser.add_argument('-v', '--verbose', action='store_true', help="More output to stderr")
    return parser.parse_args()


def load_dataset(json_file_path_or_buffer: str) -> dict:
    in_dataset = json.loads(json_file_path_or_buffer)
    return in_dataset


def say(*args, verbose=False, **kwargs):
    if ARGS.verbose or verbose:
        print("{}:".format(os.path.basename(__file__)), *args, file=sys.stderr, **kwargs)


def die(*args, **kwargs):
    say(*args, verbose=True, **kwargs)
    sys.exit(1)


if __name__ == '__main__':
    main()
