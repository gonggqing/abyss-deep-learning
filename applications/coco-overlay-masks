#!/usr/bin/python3
"""
This utility is designed to get a COCO database with masks, and output the images with the masks overlayed.
"""

import argparse
import cv2
import os
import json
import pycocotools.mask as pcm
from pycocotools.coco import COCO
import ast
import numpy as np


def get_args():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawTextHelpFormatter,
        description="""
    This utility is designed to get a COCO database with masks, and output the images with the masks overlayed.
    """
    )
    parser.add_argument("coco", help="Path to the coco database")
    parser.add_argument("output_dir", help="The output directory")
    parser.add_argument("--image_dir", help="The relative directory to read the images from.", default=None)
    parser.add_argument("--target_labels", help="A string of the target label e.g. (\"pipe\"), or a list of target labels in str format - for example \"[\"pipe\",\"flange\"]\"")
    parser.add_argument("--transparency", type=float, default="1.0", help="The brightness of the background - 1.0=normal, 0.0=black")
    parser.add_argument("--dilation", type=int, default="0", help="Used to expand the mask - this is the size of the kernel")
    parser.add_argument("--output_format", type=str, default="jpg", help="The output format of the images")
    parser.add_argument("--save_unannotated", action="store_true", help="Save the images that haven't been annotated")
    parser.add_argument("--verbose", action="store_true",  help="Output filenames to stderr")
    return parser.parse_args()


def main(args):
    """
    Loads the coco dataset.

    Gets a list of images in the dataset.

    For each image, finds the associated labels.

    From the annotation, applies the mask of the area of interest.

    Saves the image.

    Args:
        args:

    Returns:

    """
    # Make the output directory
    if not os.path.exists(args.output_dir):
        os.makedirs(args.output_dir)

    # Load the dataset
    coco = COCO(args.coco)
    # Get all the image IDs
    imgIds = coco.getImgIds(imgIds=[])
    if args.target_labels:
        if "[" in args.target_labels:
            lit_eval = ast.literal_eval(args.target_labels)
            if isinstance(lit_eval, list):
                target_labels = lit_eval
            else:
                raise ValueError("Target label needs to be either a string or a list - list not interpreted properly")
        else:
            target_labels = [args.target_labels]

        cats = coco.loadCats(coco.getCatIds())

        targetCatIds = []

        # Get the category names
        for cat in cats:
            if cat['name'] in target_labels or cat['name'].lower() in target_labels:
                targetCatIds.append(cat['id'])
    else:
        targetCatIds = None

    # For each image
    for iid in imgIds:
        # Load the image
        img = coco.loadImgs(ids=[iid])[0]
        image_path = os.path.join(args.image_dir, img['file_name']) if args.image_dir else img['file_name']
        image = cv2.imread(image_path)
        # Get the annotations for this image
        annIds = coco.getAnnIds(imgIds=[iid])
        # Load the annotation
        anns = coco.loadAnns(annIds)
        # Cycle through each annotation
        if anns:
            mask = np.logical_or.reduce(
                [pcm.decode(ann['segmentation']) > 0 
                    for ann in anns 
                    if not targetCatIds or ann['category_id'] in targetCatIds])
        else:
            mask = np.zeros(image.shape, dtype=np.bool)
        if args.dilation > 0:
            kernel = np.ones((args.dilation, args.dilation), np.uint8)
            mask = cv2.dilate(mask, kernel, iterations = 1)
        # If transparency is less than 1.0
        masked_image = np.ones(image.shape, dtype=image.dtype) * args.transparency
        masked_image[mask] = image[mask]
        masked_image[~mask] *= image[~mask]
        if args.save_unannotated or anns:
            if args.verbose:
                print("Saving:", img['file_name'])
            # Get the filepath
            output_filepath = os.path.join(
                args.output_dir,
                os.path.splitext(os.path.basename(img['file_name']))[0] + "." +  args.output_format)
            if args.output_format == "jpg":
                cv2.imwrite(output_filepath, masked_image, [int(cv2.IMWRITE_JPEG_QUALITY), 90])
            else: # TODO for PNG
                cv2.imwrite(output_filepath, masked_image)

if __name__ == "__main__":
    main(get_args())
