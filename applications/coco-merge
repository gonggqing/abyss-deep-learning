#!/usr/bin/env python3
import argparse
import json
import os
import sys

from pycocotools.coco import COCO

description = \
    """
    
    Read coco.json file(s) defined on command line or from a list of json files on stdin.
    Output a merged coco.json file in the current directory
    
    examples
        coco-merge labelled/abc/coco.json labelled/def/coco.json
        find . -name coco.json | coco-from-video
    
    """


def main():
    args = get_args()

    images = []
    annotations = []

    # Create the output directory
    os.makedirs(args.output_dir, exist_ok=True)

    # Read from stdin if source is from terminal?
    # TODO: Not 100% sure about usage of sys.stdin.isatty()
    if not sys.stdin.isatty():
        for line in sys.stdin:
            args.coco_jsons.append(line.strip())

    for coco_json in args.coco_jsons:
        # File cannot be found
        if not os.path.exists(coco_json):
            continue
        coco = COCO(coco_json)
        print(coco_json)

        # Mapping from old image id to new image id for use in the new annotation dict
        old_2_new_id = {}
        for image in coco.dataset['images']:
            old_id = image['id']
            new_id = len(images)
            images.append({
                'id': new_id,
                'height': image['height'] if 'height' in image else None,
                'width': image['width'] if 'width' in image else None,
                'original_uri': image['original_uri'] if 'original_uri' in image else None,
                'path': os.path.join(coco_json, image['path']) if 'path' in image else None,
            })
            old_2_new_id[old_id] = new_id

        for ann in coco.dataset['annotations']:
            old_id = ann['image_id']
            new_id = old_2_new_id[old_id]
            annotations.append({
                'id': len(annotations),
                'image_id': new_id,
                'caption': ann['caption'] if 'caption' in ann else None,
            })

    merged_data_set = {
        'images': images,
        'annotations': annotations,
    }

    with open(os.path.join(args.output_dir, 'coco.json'), 'w') as output_file:
        json.dump(merged_data_set, output_file, indent=4)


def get_args():
    """Get args from the command line args"""
    parser = argparse.ArgumentParser(description=description, formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument("coco_jsons", nargs='*', type=str, help="Path to coco.json files")
    parser.add_argument("--output-dir", "--output", "-o", type=str,
                        help="Output directory path for merged coco json files", default=os.getcwd())
    return parser.parse_args()


if __name__ == '__main__':
    main()
