#!/usr/bin/env python3
import argparse
import importlib.util
import os
import sys
from contextlib import redirect_stdout
from pycocotools.coco import COCO
from abyss_deep_learning.coco_classes import CocoDataset


def main(args):
    with redirect_stdout(sys.stderr):
        coco_list = []
        for coco_path in args.input:
            coco_dir = os.path.dirname(coco_path)
            coco_name = '.'.join(os.path.basename(coco_path).split('.')[0:-1])
            if args.verbose:
                print("loading {:s}".format(coco_path), file=sys.stderr)
            if not os.path.exists(coco_path):
                raise Exception("No such COCO json exists")
            coco_list.append(CocoDataset.from_COCO(
                COCO(coco_path), image_dir=args.image_dir))
    print("Loaded {:d} COCO datasets".format(len(coco_list)), file=sys.stderr)
    result = coco_list[0]
    for coco_dataset in coco_list[1:]:
        result += coco_dataset
    print(result)


def get_args():
    '''Get args from the command line args'''
    class MyAction(argparse.Action):
        def __call__(self, parser, namespace, values, option_string=None):
            # Set optional arguments to True or False
            if option_string:
                attr = True if values else False
                setattr(namespace, self.dest, attr)
            # Modify value of "input" in the namespace
            if hasattr(namespace, 'input'):
                current_values = getattr(namespace, 'input')
                try:
                    current_values.extend(values)
                except AttributeError:
                    current_values = values
                finally:
                    setattr(namespace, 'input', current_values)
            else:
                setattr(namespace, 'input', values)

    parser = argparse.ArgumentParser(
        description="Join multiple COCO datasets into one. Assumes there are no clashes in category IDs"
    )
    parser.add_argument('input', nargs='+', action=MyAction)
    parser.add_argument('--verbose', action='store_true',
                        help="verbose output to stderr")
    parser.add_argument(
        "--image-dir", default=None,
        help="If images referenced relatively and in different dirs, you must give the CSV-delimited paths"
    )

    args = parser.parse_args()
    return args


if __name__ == '__main__':
    main(get_args())
