#!/usr/bin/python3.6
import argparse
import json
import os
import sys
from contextlib import redirect_stdout
from pathlib import Path

from pycocotools.coco import COCO

CAPTION = 'caption'

PATH = 'path'

ORIGINAL_URI = 'original_uri'

WIDTH = 'width'

HEIGHT = 'height'

DESCRIPTION = \
    """
    
    Read coco.json file(s) defined on command line or from a list of json files on stdin.
    Output a merged coco.json file in the current directory
    
    examples
        coco-merge labelled/abc/coco.json labelled/def/coco.json
        find . -name coco.json | coco-from-video
    
    """


def main():
    args = get_args()

    images = []
    annotations = []

    # Create the output directory
    #os.makedirs(args.output_dir, exist_ok=True)

    # Read from stdin if source is from terminal?
    # TODO: Not 100% sure about usage of sys.stdin.isatty()
    if not sys.stdin.isatty():
        for line in sys.stdin:
            args.coco_jsons.append(line.strip())

    for coco_json in args.coco_jsons:
        # File cannot be found, skip it
        if not os.path.exists(coco_json):
            continue

        with redirect_stdout(sys.stderr):
            coco = COCO(coco_json)

        # Retrieve sub-directories if they exist between root video directory and video file path
        path = Path(os.path.join(os.getcwd(), coco_json))
        rel_dir = path.relative_to(os.getcwd())
        sub_dir, video_basename = os.path.split(rel_dir)

        # Map from old image id to new image id for use in the new annotation dict
        old_2_new_id = {}
        for image in coco.dataset['images']:
            old_id = image['id']
            new_id = len(images)
            images.append({
                'id': new_id,
                HEIGHT: image[HEIGHT] if HEIGHT in image else None,
                WIDTH: image[WIDTH] if WIDTH in image else None,
                ORIGINAL_URI: image[ORIGINAL_URI] if ORIGINAL_URI in image else None,
                PATH: os.path.join(os.getcwd(), sub_dir, image[PATH]) if PATH in image else None,
            })
            old_2_new_id[old_id] = new_id

        for ann in coco.dataset['annotations']:
            old_id = ann['image_id']
            new_id = old_2_new_id[old_id]
            annotations.append({
                'id': len(annotations),
                'image_id': new_id,
                CAPTION: ann[CAPTION] if CAPTION in ann else None,
            })

    merged_data_set = {
        'images': images,
        'annotations': annotations,
    }

    json.dump(merged_data_set, sys.stdout, indent=4)


def get_args():
    """Get args from the command line args"""
    parser = argparse.ArgumentParser(description=DESCRIPTION, formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument("coco_jsons", nargs='*', type=str, help="Path to coco.json files")
    return parser.parse_args()


if __name__ == '__main__':
    main()
