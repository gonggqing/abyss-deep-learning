#!/usr/bin/python3.6
from __future__ import print_function

import argparse
import json
import random
import sys
from contextlib import redirect_stdout

from pycocotools.coco import COCO

"""

usage: coco-grep my.json "RI" 

"""


def main(args):
    # TODO: what are edge cases for this function isatty()?
    if not sys.stdin.isatty():
        for line in sys.stdin:
            args.json_files.append(line.strip())

    for json_file in args.json_files:
        with redirect_stdout(sys.stderr):
            ds = COCO(json_file)
            new_ds = COCO(json_file)

        # sys.stdout = sys.__stdout__

            # TODO: Use case when args.num_imgs is greater than number of images in dataset
        if args.num_imgs <= len(ds.imgs):
            sample = random.sample(list(ds.imgs), args.num_imgs)
        else:
            # TODO: figure out correct exception type to raise
            raise Exception("Number of images to be sampled [{}] is greater than number of images in data set [{}]"
                            .format(args.num_imgs, len(ds.imgs)))
        new_ds.imgs = {img['id']: img for img in ds.loadImgs(sample)}

        im_ids = new_ds.getImgIds()
        ann_ids = ds.getAnnIds(imgIds=im_ids)

        new_ds.anns = ds.loadAnns(ids=ann_ids)

        dataset = {
            'images': list(new_ds.imgs.values()),
            'annotations': new_ds.anns,
        }

        # with open("sampled_" + json_file, 'w') as outfile:
        json.dump(dataset, sys.stdout, indent=4)


    sys.exit(0)


def get_args():
    parser = argparse.ArgumentParser(
        description="Split a COCO JSON database into multiple."
    )
    parser.add_argument('json_files', nargs='+', type=str, help='JSON file to grep from')
    parser.add_argument('num_imgs', type=int, help="todo")

    args = parser.parse_args()
    return args


if __name__ == '__main__':
    main(get_args())
