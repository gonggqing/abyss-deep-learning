#!/usr/bin/env python3
import argparse
import json
import os
import random
import sys
from contextlib import redirect_stdout

from pycocotools.coco import COCO

DESCRIPTION = \
"""
Randomly sample data from coco json file passed as command line arguments or piped in from another coco utility.

Output coco json contents in stdout.

examples:
    coco-sample coco.a.json coco.b.json
    find . -name coco.json | coco-merge
"""


def main():
    global ARGS
    ARGS = get_args()

    say("creating coco object")
    coco = load_coco(sys.stdin.read())

    if ARGS.num_imgs <= len(coco.imgs):
        sample = random.sample(list(coco.imgs), ARGS.num_imgs)
    else:
        raise RuntimeError("Number of images to be sampled [{}] is greater than number of images in the data set "
                           "[{}] ".format(ARGS.num_imgs, len(coco.imgs)))

    coco.dataset['images'] = coco.loadImgs(sample)
    coco.dataset['annotations'] = coco.loadAnns(coco.getAnnIds(imgIds=sample))
    json.dump(coco.dataset, sys.stdout, indent=4)

    say("done")
    sys.exit()


def load_coco(json_buffer):
    with redirect_stdout(Verbose):
        coco = COCO()
        coco.dataset = json.loads(json_buffer)
        coco.createIndex()
    return coco


def say(*args, **kwargs):
    if ARGS.verbose:
        print("{}:".format(os.path.basename(__file__)), *args, file=sys.stderr, **kwargs)


class Verbose:
    @staticmethod
    def write(line):
        line = line.strip()
        if line:
            say(line)


def get_args():
    parser = argparse.ArgumentParser(description=DESCRIPTION)
    parser.add_argument('json_file', nargs='*', type=str, help='JSON file to sample from')
    parser.add_argument('num_imgs', type=int, help="Number of images to randomly sample")
    parser.add_argument('-v', '--verbose', action='store_true', help="More output to stderr")
    return parser.parse_args()


if __name__ == '__main__':
    main()
