#!/usr/bin/env python3
import argparse
import json
import os
import random
import sys

from pycocotools.coco import COCO

SCRIPT_NAME = os.path.basename(__file__)


DESCRIPTION = \
"""
Randomly sample data from coco json file passed as command line arguments or piped in from another coco utility.

Output coco json contents in stdout.

examples:
    coco-sample coco.a.json coco.b.json
    find . -name coco.json | coco-merge
"""


def main(args):
    stdin_string = ""
    if not sys.stdin.isatty():
        for line in sys.stdin:
            stdin_string += line.strip()

    if stdin_string:
        args.json_file.append(stdin_string)

    data_set = {
        'images': [],
        'annotations': [],
    }

    for json_file_path_or_buffer in args.json_file:
        say("creating coco object")
        coco = load_coco(json_file_path_or_buffer)

        if args.num_imgs <= len(coco.imgs):
            sample = random.sample(list(coco.imgs), args.num_imgs)
        else:
            raise RuntimeError("Number of images to be sampled [{}] is greater than number of images in the data set "
                               "[{}] ".format(args.num_imgs, len(coco.imgs)))

        data_set['images'] += [img for img in coco.loadImgs(sample)]
        img_ids = [img['id'] for img in data_set['images']]

        ann_ids = coco.getAnnIds(imgIds=img_ids)
        data_set['annotations'] += coco.loadAnns(ids=ann_ids)

    json.dump(data_set, sys.stdout, indent=4)
    say("done")
    sys.exit(0)


def load_coco(json_file_path_or_buffer):
    if os.path.exists(json_file_path_or_buffer):
        coco = COCO(json_file_path_or_buffer)
    else:
        coco = COCO()
        coco.dataset = json.loads(json_file_path_or_buffer)
        coco.createIndex()
    return coco


def say(*args, **kwargs):
    print("{}:".format(SCRIPT_NAME), *args, file=sys.stderr, **kwargs)


def get_args():
    parser = argparse.ArgumentParser(
        description="Split a COCO JSON database into multiple."
    )
    parser.add_argument('json_file', nargs='*', type=str, help='JSON file to sample from')
    parser.add_argument('num_imgs', type=int, help="Number of images to randomly sample")
    return parser.parse_args()


if __name__ == '__main__':
    main(get_args())
