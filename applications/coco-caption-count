#!/usr/bin/env python3
import json
import os
import sys
from argparse import ArgumentParser
from operator import itemgetter

SCRIPT_NAME = os.path.basename(__file__)


def main():
    args = get_args()
    caption_count = {
        'total_images': 0
    }

    stdin_string = ""
    if not sys.stdin.isatty():
        for line in sys.stdin:
            stdin_string += line.strip()

    if stdin_string:
        args.json_files.append(stdin_string)

    for json_file_path_or_buffer in args.json_files:
        say("loading dataset")
        in_ds = load_dataset(json_file_path_or_buffer)
        say("counting captions")
        caption_count = extract_data(in_ds, caption_count)

    if args.percent:
        total_count = sum(caption_count.values())
        for caption, count in caption_count.items():
            caption_count[caption] = {
                'count': count,
                'percentage': count / total_count * 100,
            }

    json.dump(caption_count, sys.stdout, indent=4)
    say("done")
    sys.exit()


def get_args():
    parser = ArgumentParser(
        description="Count all unique caption instances in given coco files"
    )
    parser.add_argument('json_files', nargs='*', type=str, help='JSON files to caption count')
    parser.add_argument('-m', '--multi-label', action='store_true', help='Option to treat multi-labels as unique')
    parser.add_argument('-p', '--percent', action='store_true', help='Option to output percentage of entire data set')
    return parser.parse_args()


def extract_data(data_set, caption_count):
    args = get_args()

    anns = data_set['annotations']
    anns.sort(key=itemgetter('image_id', 'id'))

    curr_img_id = None
    for ann in anns:
        if args.multi_label:
            captions = []
            if curr_img_id != ann['image_id']:
                add_caption_to_count(captions, caption_count)
                curr_img_id = ann['image_id']
                captions.clear()
            captions.append(ann['caption'])
        else:
            add_caption_to_count(ann['caption'], caption_count)

    caption_count['total_images'] += len(data_set['images'])

    return caption_count


def add_caption_to_count(caption, caption_count):
    if caption not in caption_count:
        caption_count[caption] = 0
    caption_count[caption] += 1


def load_dataset(json_file_path_or_buffer):
    if os.path.exists(json_file_path_or_buffer):
        with open(json_file_path_or_buffer, 'r') as file_handle:
            in_dataset = json.load(file_handle)
    else:
        in_dataset = json.loads(json_file_path_or_buffer)
    return in_dataset


def say(*args, **kwargs):
    print("{}:".format(SCRIPT_NAME), *args, file=sys.stderr, **kwargs)


if __name__ == '__main__':
    main()
