#!/usr/bin/env python3
from __future__ import print_function

import json
import os
import sys

from argparse import ArgumentParser
from operator import itemgetter

from abyss_deep_learning.datasets.coco import CocoDataset


def main():
    args = get_args()
    caption_count = {
        'total_images': 0
    }
    json_string = ''

    # TODO: Check edge case for isatty()
    if not sys.stdin.isatty():
        for line in sys.stdin:
            stripped_line = line.strip()
            if os.path.exists(stripped_line):
                args.json_files.append(stripped_line)
            else:
                json_string += stripped_line

    if json_string:
        args.json_files.append(json_string)

    for json_file in args.json_files:
        coco_ds = CocoDataset(json_file)
        caption_count = extract_data(coco_ds.coco.dataset, caption_count)

    if args.percent:
        total_count = sum(caption_count.values())
        for caption, count in caption_count.items():
            caption_count[caption] = {
                'count': count,
                'percentage': count / total_count * 100,
            }

    json.dump(caption_count, sys.stdout, indent=4)


def get_args():
    parser = ArgumentParser(
        description="Count all unique caption instances in given coco files"
    )
    parser.add_argument('json_files', nargs='*', type=str, help='JSON files to caption count')
    parser.add_argument('-m', '--multi-label', action='store_true', help='Option to treat multi-labels as unique')
    parser.add_argument('-p', '--percent', action='store_true', help='Option to output percentage of entire data set')
    return parser.parse_args()


def extract_data(dataset, caption_count):
    args = get_args()

    anns = dataset['annotations']
    anns.sort(key=itemgetter('image_id', 'id'))

    curr_img_id = None
    for ann in anns:
        if args.multi_label:
            captions = []
            if curr_img_id != ann['image_id']:
                add_caption_to_count(captions, caption_count)
                curr_img_id = ann['image_id']
                captions.clear()
            captions.append(ann['caption'])
        else:
            add_caption_to_count(ann['caption'], caption_count)

    caption_count['total_images'] += len(dataset['images'])

    return caption_count


def add_caption_to_count(caption, caption_count):
    if caption not in caption_count:
        caption_count[caption] = 0
    caption_count[caption] += 1


if __name__ == '__main__':
    main()
