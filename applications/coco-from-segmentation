#!/usr/bin/env python3
import argparse
import json
import logging
import os
import sys
import time
from datetime import datetime
from numbers import Number
from typing import Union

import numpy as np
import skimage
from PIL import Image

from abyss_deep_learning.utils import imread, polygon_to_bbox, polygon_to_mask

__author__ = 'Kent Hu, and Jeff Mohammed'
__maintainer__ = 'Kent Hu'

_DESCRIPTION = """
The utility takes in a COCO file and applies segmentations from the mask file provided as a command line argument 
and outputs the new COCO json to stdout. If a binary file is given, values are assumed to be normalized between 0 and 1.
The COCO data file is taken from stdin whilst the mask coco file is supplied using a required argument, 
e.g.: cat data.json | coco-from-segmentation mask.json

examples: 
    Generates a COCO file with segmentation annotations inferred from the amount of unique pixels in the mask.
    Holes are connected by drawing a line between the first pixel in the polygon points to the closest background pixel
    e.g.: Use for mask JSON that contains paths to segmentation masks from the SemanticPredictions layer
    cat images.json | coco-from-segmentation mask.json -c from-mask -n 2 --connect-holes > segmentations.json

    Generates a COCO file with segmentation annotations from pixels above and below certain values.
    e.g. Use for mask JSON that contains paths to segmentation masks from the ResizedBilinear layer
    cat images.json | coco-from-segmentation mask.json -c 1 --lower-threshold 0.3 --upper-threshold 0.8 > segmentations.json

Use --normalize if passing unnormalized .bin file
"""

np.set_printoptions(threshold=np.inf)


def main(args: argparse.Namespace):
    logging.basicConfig(format='%(filename)s: %(asctime)s.%(msecs)03d: %(levelname)s: %(message)s',
                        datefmt='%Y-%m-%d %H:%M:%S',
                        level=args.verbose)
    logging.info('--verbose enabled')

    if args.category_id == 'from-mask':
        if args.num_classes is None:
            logging.ERROR("--num-classes must be specified when passing 'from-mask' to --category-id")
            sys.exit(1)
        else:
            thresholds = [i / args.num_classes for i in range(1, args.num_classes + 1)]

    # Empty file check
    buffer = sys.stdin.read().strip()
    if buffer:
        image_json = json.loads(buffer)
    else:
        logging.CRITICAL("Expecting input from stdin: received empty characters {}".format(repr(buffer)))
        sys.exit(1)

    # Empty file check
    with open(args.mask_file) as f:
        buffer = f.read().strip()
        if buffer:
            mask_json = json.loads(buffer)
        else:
            logging.CRITICAL("Expecting input from stdin: received empty characters {}".format(repr(buffer)))
            sys.exit(1)

    coco_json = {
        'info': image_json.get('info', {
            'contributor': 'Abyss Solutions',
            'total_time': '00h00m00s',
            'year': str(datetime.now().year),
            'date_created': str(datetime.now()),
            'description': 'This is a dataset configured by Abyss Solutions.',
            'version': '1.0',
            'url': 'http://www.abysssolutions.com.au',
        }),
        'images': image_json.get('images', []),
        'annotations': [],
        'categories': image_json.get('categories', []),
        'licenses': image_json.get('licenses', [{
            'id': 0,
            'url': 'http://creativecommons.org/licenses/by-nc-sa/2.0/',
            'name': 'Attribution-NonCommercial-ShareAlike License',
        }])
    }

    padding = 1
    id_2_image = {entry['id']: entry for entry in image_json['images']}
    for mask_entry in mask_json['images']:
        tic = time.perf_counter()
        mask_id = mask_entry['id']
        logging.info('Evaluating entry {}'.format(mask_id))

        original_entry = id_2_image.get(mask_id, None)
        if original_entry is None:
            logging.warning('Skipping mask {} as original entry could not be found'.format(mask_id))
            continue
        height = original_entry.get('height')
        width = original_entry.get('width')
        if height is None or width is None:
            width, height = Image.open(original_entry['path']).size
        padded_mask = load_input(mask_entry, args.input_format, args.num_classes, padding=padding, normalize=args.norm,
                                 height=height, width=width)
        if padded_mask is None:
            logging.error("failed to load from file: '{}'; possibly, file type {} not supported".format(mask_entry['path'], get_file_ext(mask_entry['path'])))
            sys.exit(1)

        category_ids = []
        category_contours = []

        if args.category_id == 'from-mask':
            for category_id in range(len(thresholds)):
                # Create a copy of the padded mask to mask out other category segmentation's
                thresholded_padded_mask = np.array(padded_mask)

                # Mask lower threshold of previous category
                if category_id != 0:
                    thresholded_padded_mask[thresholded_padded_mask <= (
                            thresholds[category_id - 1] + np.finfo(thresholded_padded_mask.dtype).eps * 2)] = 0.0

                # Mask upper threshold of next category
                try:
                    thresholded_padded_mask[thresholded_padded_mask >= (
                            thresholds[category_id + 1] - np.finfo(thresholded_padded_mask.dtype).eps * 2)] = 0.0
                except IndexError:
                    pass

                # list of Nx2 array returned, consisting of n (row, column) points along the contour
                threshold_value = thresholds[category_id]

                found_contours = [np.around(contour).astype(dtype=np.uint16) for contour in
                                  skimage.measure.find_contours(thresholded_padded_mask, threshold_value - np.finfo(
                                      thresholded_padded_mask.dtype).eps * 2)]
                if args.connect_holes:
                    thresholded_padded_mask = connect_segmentation_holes(thresholded_padded_mask, found_contours,
                                                                         class_value=threshold_value)
                    found_contours = [np.around(contour).astype(dtype=np.uint16) for contour in
                                      skimage.measure.find_contours(thresholded_padded_mask, threshold_value - np.finfo(
                                          thresholded_padded_mask.dtype).eps * 2)]

                category_ids.append(category_id + 1)
                category_contours.append(found_contours)
        else:
            # Create a copy of the padded mask to mask out other category segmentation's
            thresholded_padded_mask = np.array(padded_mask)
            thresholded_padded_mask[thresholded_padded_mask >= (args.up_thresh + np.finfo(float).eps * 2)] = 0.0
            thresholded_padded_mask[thresholded_padded_mask <= (args.low_thresh - np.finfo(float).eps * 2)] = 0.0

            found_contours = [np.around(contour).astype(dtype=np.uint16) for contour in
                              skimage.measure.find_contours(thresholded_padded_mask, args.low_thresh - np.finfo(
                                  thresholded_padded_mask.dtype).eps * 2)]
            if args.connect_holes:
                thresholded_padded_mask = connect_segmentation_holes(thresholded_padded_mask, found_contours)
                found_contours = [np.around(contour).astype(dtype=np.uint16) for contour in
                                  skimage.measure.find_contours(thresholded_padded_mask, args.low_thresh - np.finfo(
                                      thresholded_padded_mask.dtype).eps * 2)]

            category_contours.append(found_contours)
            category_ids.append(int(args.category_id))
        original_mask = padded_mask[padding:-padding, padding:-padding]
        if args.save_per_image:
            coco_json['images'] = []
            original_entry.update({'id': 0})
            coco_json['images'].append(original_entry)
            coco_json['annotations'] = []
        shape = (mask_entry.get('height'), mask_entry.get('width'))
        if None in shape:
            logging.warning("shape of mask entry unknown, using height -> {} and width -> {}".format(height, width))
            shape = height, width
        for contours, category_id in zip(category_contours, category_ids):
            logging.info("{} contours in category {}".format(len(contours), category_id))
            contours = np.subtract(contours, 1)
            for contour in contours:
                contour = skimage.measure.approximate_polygon(contour, args.tolerance)
                contour[contour < 0] = 0
                polygon = np.flip(contour, axis=1).ravel().tolist()
                grid = polygon_to_mask(polygon)
                rr, cc = [i.astype(dtype=np.uint16) for i in skimage.draw.polygon(contour[:, 0], contour[:, 1], shape=shape)]
                r, c = [i.astype(dtype=np.uint16) for i in skimage.draw.polygon_perimeter(contour[:, 0], contour[:, 1], shape=shape)]
                area = np.count_nonzero(grid)
                score = 0 if is_hole(contour) else original_mask[np.hstack([rr, r]), np.hstack([cc, c])].sum() / area
                coco_json['annotations'].append({
                    "id": len(coco_json['annotations']),
                    "image_id": original_entry['id'],
                    "category_id": category_id,
                    "segmentation": [polygon],
                    "area": area,
                    "bbox": polygon_to_bbox(polygon),
                    "iscrowd": 0,
                    "score": score,
                })

        if args.save_per_image:
            with open(os.path.join(os.path.dirname(mask_entry['path']),
                                   "{}.{}".format(os.path.splitext(mask_entry['file_name'])[0], 'json')), "w") as f:
                json.dump(coco_json, f, indent=4)
        logging.info(
            "Processing time for mask {}: {}h {}m {}s".format(mask_id, *pretty_time(time.perf_counter() - tic)))

    if not args.save_per_image:
        json.dump(coco_json, sys.stdout, indent=4)
    sys.exit(0)


def connect_segmentation_holes(mask: np.ndarray, contours: list, class_value: float = 0.5) -> np.ndarray:
    """

    Args:
        mask: Mask of segmentation
        contours: list of N x 2 np.ndarray that contain segmentation polygons of given mask
        class_value: value to use to mask previous contours of the class. Ask Kent for further information

    Returns:
        Mask that has holes inside a segmentation connected to the closest background pixel
    """
    mask_copy = np.array(mask)
    for contour in contours:
        if is_hole(contour):
            logging.info("Connecting holes with lines")
            # Mask polygon segmentation to have same value as current category so it doesn't double back
            rr, cc = [i.astype(dtype=np.uint16) for i in skimage.draw.polygon(contour[:, 0], contour[:, 1])]
            mask_copy[rr, cc] = class_value
            mask_copy[contour[:, 0], contour[:, 1]] = class_value

            start = contour[0, :]
            end = find_nearest_pixel(start, mask_copy)
            rr, cc = [i.astype(dtype=np.uint16) for i in skimage.draw.line(*start, *end)]
            mask[rr, cc] = 0
    return mask


def find_nearest_pixel(start: np.ndarray, mask: np.ndarray, pixel_value: float = 0):
    min_coords = np.argwhere(mask == pixel_value).astype(np.int16)
    end = min_coords[np.square(min_coords - start).sum(axis=1).argmin()]
    return end


def is_hole(contour: np.ndarray) -> bool:
    """

    Args:
        contour: N x 2 array of (r, c)

    Returns:
        True if contour is a hole otherwise False
    """
    diff_x = np.diff(contour.astype(dtype=np.int16)[:, 1], axis=0)
    sum_y = np.convolve(contour[:, 0], np.ones(2, dtype=np.uint8), mode='valid')
    prod_x_y = np.multiply(diff_x, sum_y).sum().astype(np.int32)
    return True if prod_x_y > 0 else False


def load_input(image_entry: dict, input_format: str, max_: Number = None, padding: int = 0, normalize: bool = False,
               height: int = None, width: int = None) -> Union[np.ndarray, None]:
    """

    Args:
        width: width of input image
        height: height of input image
        image_entry: Dictionary style image entry in COCO format
        padding: Pad image borders by however many pixels specified
        normalize: Normalize values to 0 - 1. If file extension is png, assumes maximum value is 255 and uses that to normalize

    Returns:
        np.ndarray representation of image normalized from 0 to 1. If file extension is not valid, returns None
    """
    if width is None:
        width = image_entry.get('width')
    if height is None:
        height = image_entry.get('height')
    if height is None or width is None:
        try:
            width, height = Image.open(image_entry['path']).size
        except OSError:
            pass  # Unidentifiable image type
    img = np.zeros((height + padding * 2, width + padding * 2), dtype=np.float16)
    ext = get_file_ext(image_entry['path'])
    if ext in {'bin'}:
        img_buf = np.fromfile(image_entry['path'], dtype=input_format)
        try:
            img_buf = np.reshape(img_buf, (height, width))
        except TypeError:
            logging.error("Unable to find height or width value to reshape binary into image")
            return None
        if normalize:
            min_ = np.min(img_buf)
            if max_ is None:
                max_ = np.max(img_buf)
            img_buf = (img_buf - min_) / (max_ - min_)
    elif ext in {'png', 'jpg'}:
        img_buf = imread(image_entry['path'], dtype=np.float16)
        img_buf /= 255
    else:
        return None
    img[padding: padding + height, padding: padding + width] = img_buf[:, :]
    return img


def get_file_ext(path: str) -> str:
    """

    Args:
        path: path to file like

    Returns:
        extension of file like i.e. bin, png, jpg
    """
    _, ext = os.path.splitext(path)
    ext = ext.lstrip('.')
    return ext


def bounding_box(polygon, w=None, h=None):
    """
    Finds bounding box of segmentation from a list of (x, y) points

    Args:
        polygon: List of (x, y) points of segmentation
        w:
        h:

    Returns:
        Bounding box from points (x, y, width, height)
    """
    min_x, min_y = [int(i) for i in np.min(polygon, axis=0)]
    max_x, max_y = [int(i) for i in np.max(polygon, axis=0)]
    # Convert to native Python scalars
    # Should be a better way to do this I think
    if w is not None and h is not None:
        min_x = max(0, min_x)
        min_y = max(0, min_y)
        max_x = min(w, max_x)
        max_y = min(h, max_y)
    return [min_x, min_y, max_x - min_x + 1, max_y - min_y + 1]


def pretty_time(seconds: float):
    """

    Args:
        seconds: Total time in seconds

    Returns:
        hours, minutes, seconds
    """
    minutes, seconds = divmod(seconds, 60)
    hours, minutes = divmod(minutes, 60)
    return int(hours), int(minutes), seconds


def get_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description=_DESCRIPTION, formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('mask_file', type=str, help="Mask JSON File")
    parser.add_argument('-c', '--category-id', type=str,
                        help="The id of the category to set the mask can be an int or from-mask. "
                             "from-mask infers category based on how many unique values there are for the pixels in a segmentation mask. "
                             "The pixel values in the .bin mask files are assumed to be normalised. If they are not, specify --normalize",
                        required=True)
    parser.add_argument('-n', '--num-classes', type=int,
                        help="Number of possible classes that can be detected from the network (excluding background). Used in conjunction with from-mask.")
    parser.add_argument('-l', '--low-thresh', '--lower-threshold', type=float, default=0.0,
                        help="The lower score to threshold the image by, default: %(default)s")
    parser.add_argument('-u', '--up-thresh', '--upper-threshold', type=float, default=1.0,
                        help="The upper score to threshold the image by, default: %(default)s")
    parser.add_argument('-t', '--tolerance', '--polygon-tolerance', type=float, default=0.0,
                        help="Threshold tolerance for polygon precision (see skimage.metrics.approximate_polygon(), default: %(default)s")
    parser.add_argument('--connect-holes', action='store_true',
                        help="Connect holes in a segmentation so that they are drawn as background in annotation tool.")
    parser.add_argument('--norm', '--normalize', action='store_true',
                        help="Normalize pixel values in mask to be between 0 and 1")
    parser.add_argument('--save-per-image', action='store_true',
                        help="Output COCO JSON for each image at location mask['path'] as mask['file_name'].png")
    parser.add_argument('--input-format', choices=np.sctypeDict.keys(), type=str, default='uint32',
                        help="Specify input format of binary file to read in as. Default is %(default)s")
    parser.add_argument('-v', '--verbose', action='store_const', const=logging.INFO, help="More output to stderr")
    return parser.parse_args()


if __name__ == '__main__':
    main(get_args())
