#!/usr/bin/env python3
import argparse
import os

import matplotlib.pyplot as plt
import numpy as np

from skimage.io import imread, imsave
from pycocotools.coco import COCO
# from pycocotools import mask


def decode_rbg_label(encoded):
    annotation = np.bitwise_or(
        np.bitwise_or(
            encoded[:, :, 0].astype(np.uint32),
            encoded[:, :, 1].astype(np.uint32) << 8
        ),
        encoded[:, :, 2].astype(np.uint32) << 16
    )
    return annotation


def encode_rgb_label(annotation, dtype=np.uint8):
    encoded = np.stack([
        np.bitwise_and(annotation, 255),
        np.bitwise_and(annotation >> 8, 255),
        np.bitwise_and(annotation >> 16, 255),
    ], axis=2).astype(dtype)
    return encoded


def foreach_coco_image(coco_path, function):
    dataset = COCO(coco_path)
    image_ids = dataset.getImgIds()
    images = dataset.loadImgs(image_ids)
    for image in images:
        annotations = dataset.loadAnns(dataset.getAnnIds(imgIds=[image['id']]))
        function(dataset, image, annotations)


def rgb_mask(image, mask, label=1, color=0):
    rgb = image.copy()
    rgb[mask == label] = color
    return rgb


def save_mask_as_image(coco_dataset, image, annotations, args):
    if not os.path.exists(args.destination_dir):
        os.makedirs(args.destination_dir)

    annotation_img = np.zeros(
        (image['height'], image['width']), dtype=np.uint8)
    for annotation in annotations:
        label = coco_dataset.annToMask(annotation)  # .astype(np.uint8)
        if args.multiclass and annotation['category_id'] > 0:
            annotation_img &= (label << (int(annotation['category_id']) - 1))
        else:
            # Note the order of the annotations may change the way this appears
            annotation_img[label == annotation['category_id']
                           ] = annotation['category_id']
    if args.as_rgb:
        annotation_img = encode_rgb_label(annotation_img)

    if args.prefix:
        image_path = os.path.join(args.prefix, ['file_name'])
    else:
        image_path = os.path.join(image['file_name'])
    print("Reading from: %s" %image_path)

    if args.overlay:
        rgb = imread(image['path'])[..., 0:3]
        annotation_img = rgb_mask(
            rgb, annotation_img, label=1, color=(255, 255, 255))
    if args.show:
        plt.figure()
        plt.imshow(annotation_img)
        plt.show()
    else:
        if args.use_basename:
            save_path = os.path.join(args.destination_dir, os.path.basename(image['file_name']))
        else:
            save_path = os.path.join(args.destination_dir, image['file_name'])  # TODO this doesn't work - replacing with below
            save_path = os.path.join(args.destination_dir, os.path.basename(image['file_name']))
        if not save_path.endswith(args.image_format):
            if args.image_format == 'png':
                save_path = save_path.replace('.jpg', '.png')
            elif args.image_format == 'jpg':
                save_path = save_path.replace('.png', '.jpg')

        print("Saving to: %s" %save_path)
        imsave(save_path, annotation_img)


def main(args):
    foreach_coco_image(
        args.coco_path,
        lambda coco_dataset, image, annotation: save_mask_as_image(
            coco_dataset, image, annotation, args)
    )


def get_args():
    '''Get args from the command line args'''
    parser = argparse.ArgumentParser(
        description="Extract mask segmentation from coco json and write to image.")
    parser.add_argument("coco_path", help="The coco JSON to parse.")
    parser.add_argument("destination_dir",
                        help="The destination to dump the label images.")
    parser.add_argument(
        "--multiclass", help="Create an encoded multi-class image", action='store_true')
    parser.add_argument(
        "--as-rgb", help="Encode image classes into RGB", action='store_true')
    parser.add_argument(
        "--overlay", help="Overlay onto RGB images", action='store_true')
    parser.add_argument(
        "--show", help="Show instead of saving", action='store_true')
    parser.add_argument("--image_format", default="png", help="The output format - choice of {png, jpg}")
    parser.add_argument(
        "--prefix", help="The prefix for the filepath - makes prefix/file_name as the total path", action='store_true')
    parser.add_argument("--use_basename", action='store_true', help="Extract the basename from the image path")
    args = parser.parse_args()
    return args


if __name__ == '__main__':
    main(get_args())
