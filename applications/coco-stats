#!/usr/bin/env python3
import argparse
import json
import os
import sys
import time
from collections import defaultdict
from contextlib import redirect_stdout

from pycocotools.coco import COCO

_DESCRIPTION = \
    """
Read coco file from stdin and count all unique category/caption instances. 

Output coco json contents in stdout. 

examples: 
    cat coco.json | coco-stats count
"""


def main(args=None):
    start = time.perf_counter()
    print_verbose("loading dataset", verbose=args.verbose)
    coco = args.func(load_coco(sys.stdin.read(), args.verbose), args)
    json.dump(coco.dataset, sys.stdout, indent=4)
    print_verbose("done in {}s".format(time.perf_counter() - start), verbose=args.verbose)
    sys.exit(0)


def get_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description=_DESCRIPTION, formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('-v', '--verbose', action='store_true', help='More output to stderr')

    subparsers = parser.add_subparsers(title="Actions", description="Actions to apply to all images in the dataset. For more information on each individual action, append -h", help="Available actions")
    count_parser = subparsers.add_parser('count',       help="Count all annotations in the dataset")
    count_parser.set_defaults(func=count)

    return parser.parse_args()


def count(coco: COCO, args: argparse.Namespace) -> COCO:
    for image in coco.loadImgs(ids=coco.getImgIds()):
        category_count = defaultdict(int)
        annotations = coco.loadAnns(ids=coco.getAnnIds(imgIds=image['id']))
        for annotation in annotations:
            category = coco.loadCats(ids=coco.getCatIds(catIds=annotation['category_id'])).pop()
            category_count[category['name']] += 1
        image.update(category_count)
    for category in coco.loadCats(ids=coco.getCatIds()):
        category_count = len(coco.loadAnns(ids=coco.getAnnIds(catIds=category['id'])))
        category['count'] = category_count
        print_verbose("{}: {}".format(category['name'], category_count), verbose=args.verbose)
    return coco


def load_coco(json_buffer: str, verbose: bool) -> COCO:
    with redirect_stdout(Verbose(verbose)):
        coco = COCO()
        coco.dataset = json.loads(json_buffer)
        coco.createIndex()
    return coco


def print_verbose(*args, verbose=False, **kwargs):
    if verbose:
        print("{}:".format(os.path.basename(__file__)), *args, file=sys.stderr, **kwargs)


def print_and_die(*args, **kwargs):
    print_verbose(*args, verbose=True, **kwargs)
    sys.exit(1)


class Verbose:
    def __init__(self, verbose: bool):
        self._verbose = verbose

    def write(self, line: str):
        if line:
            print_verbose(line.strip(), verbose=self._verbose)


if __name__ == '__main__':
    main(args=get_args())
