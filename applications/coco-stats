#!/usr/bin/env python3
import json
import os
import sys
from argparse import ArgumentParser
from collections import defaultdict
from operator import itemgetter


def main():
    global ARGS
    ARGS = get_args()

    category_count = defaultdict(int)

    if not sys.stdin.isatty():
        stdin_string = sys.stdin.read()
        if stdin_string:
            ARGS.json_files.append(stdin_string)

    for json_file_path_or_buffer in ARGS.json_files:
        say("loading dataset")
        in_ds = load_dataset(json_file_path_or_buffer)
        say("counting categories")
        category_count = count_categories(in_ds, category_count)

        if ARGS.percent:
            total_count = sum(category_count.values())
            for caption, count in category_count.items():
                category_count[caption] = {
                    'count': count,
                    'percentage': count / total_count * 100,
                }

        json.dump(category_count, sys.stdout, indent=4)
    say("done")
    sys.exit()


def get_args():
    parser = ArgumentParser(
        description="Count all unique category instances in given coco files"
    )
    parser.add_argument('json_files', nargs='*', type=str, help='JSON files to caption count')
    parser.add_argument('-m', '--multi-label', action='store_true', help='Option to treat multi-labels as unique')
    parser.add_argument('-p', '--percent', action='store_true', help='Option to output percentage of entire data set')
    parser.add_argument('-v', '--verbose', action='store_true', help='More output to stderr')
    return parser.parse_args()


def count_categories(data_set, category_count):
    args = get_args()

    anns = data_set['annotations']
    anns.sort(key=itemgetter('image_id', 'id'))
    cat_id_2_cat = {cat['id']: cat['name'] for cat in data_set['categories']}
    curr_img_id = None
    for ann in anns:
        if args.multi_label:
            categories = []
            if curr_img_id != ann['image_id']:
                category_count[categories] += 1
                curr_img_id = ann['image_id']
                categories.clear()
            categories.append(cat_id_2_cat[ann['category_id']])
        else:
            category_count[cat_id_2_cat[ann['category_id']]] += 1
    category_count['total_images'] += len(data_set['images'])
    category_count['categories'] = data_set['categories']
    return category_count


def load_dataset(json_file_path_or_buffer):
    if os.path.exists(json_file_path_or_buffer):
        with open(json_file_path_or_buffer, 'r') as file_handle:
            in_dataset = json.load(file_handle)
    else:
        in_dataset = json.loads(json_file_path_or_buffer)
    return in_dataset


def say(*args, **kwargs):
    if ARGS.verbose:
        print("{}:".format(os.path.basename(__file__)), *args, file=sys.stderr, **kwargs)


if __name__ == '__main__':
    main()
