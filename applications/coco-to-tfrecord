#!/bin/bash

set -e

SCRIPTNAME=$(basename $0)
ARGPARSE_DESCRIPTION="Convert a COCO JSON dataset to a TfRecord dataset.
e.g.: 
coco-to-tfrecord \\\\
  train,train_800.json,/data/images-trainval \\\\
  val,val_800.json,/data/images-trainval \\\\
  --deeplab-dir $HOME/src/tensorflow_models/research/deeplab"
source $(dirname $0)/argparse.bash || exit 1 # This imports functions info, error, optional_flag, bool_flag, assert
argparse "$@" <<EOF || exit 1
parser.add_argument('set_specs', nargs='+', help='CSV tuples of (set_name,coco_path,image_dir) to embed in the dataset')
parser.add_argument('--image-format', help='Extension of the image files, one of: {png, jpg}', default='jpg')
parser.add_argument('--deeplab-dir', help='The path to the tensorflow deeplab dir', default='$HOME/src/tensorflow_models/research/deeplab')
parser.add_argument('--check-labels', action='store_true', help='Output the histograms of the label values.')
parser.add_argument('--verbose', '-v', action='store_true', help='Verbose output to stderr')
EOF

set -e

LABELSET_DIR=$PWD
VOC_DIR=$LABELSET_DIR/voc

info "[1/2] Creating VOC dataset"
#Make relevant VOC structures
mkdir -p \
      "$VOC_DIR/JPEGImages" \
      "$VOC_DIR/SegmentationClassRaw" \
      "$VOC_DIR/ImageSets/Segmentation" \
      "$LABELSET_DIR/tfrecord"

# First create symlinks to relevant images
# cd "$LABELSET_DIR"
cd "$VOC_DIR/JPEGImages"
echo '{}' > "$LABELSET_DIR/tfrecord/dataset_meta.json"
for set_pair in "${SET_SPECS[@]}"; do
  echo $set_pair | while IFS=, read -r set_name set_path set_image_dir; do
    info "Processing $set_name: $set_path @ $set_image_dir"
    assert "! -z $set_name -a ! -z $set_path -a ! -z $set_image_dir" "$set_name tuple incomplete (requires set_name,set_path,set_image_dir)"
    assert "-f $set_path " "$set_name: $set_name COCO not found"
    assert "-d $set_image_dir" "$set_name: image directory not found"
    jq '.images[].file_name' "$set_path" | sed 's/"//g' > "$VOC_DIR/images.$set_name.csv" # Extract image filenames from COCO
    cat "$VOC_DIR/images.$set_name.csv" | sort | while IFS=$"\n" read -r filename; do ln -s "${set_image_dir}/${filename}"; done
    cat "$VOC_DIR/images.$set_name.csv" | sort | sed 's/\.png//' | sed 's/\.jpg//' >"$VOC_DIR/ImageSets/Segmentation/${set_name}.txt"
    
    ## Create the VOC label images
    ## #TODO: Currently handling images with no annotations very poorly, ensure every image has at least one annotation
    cd "$VOC_DIR" 
    coco-to-voc "$set_path" SegmentationClassRaw -v -v --image-dir JPEGImages

    # Append to the metadata file
    num_classes=$(jq '.categories | length' <"$set_path")
    set_size=$(wc -l < "$VOC_DIR/ImageSets/Segmentation/${set_name}.txt")
    json_meta=$(
      echo "$num_classes,$set_size" |
      name-value-from-csv num_classes,set_size |
      name-value-convert --to json)
    existing_json=$(cat "$LABELSET_DIR/tfrecord/dataset_meta.json")
    echo -en $existing_json | jq ". |= . + {\"$set_name\": $json_meta}" > "$LABELSET_DIR/tfrecord/dataset_meta.json"
  done
done


# Check the label images contain the labels you expect
if [[ ! -z $CHECK_LABELS ]]; then
  info "Checking label histograms"
  convert SegmentationClassRaw/*.png -define histogram:unique-colors=true -format "%f %c" histogram:info:- # This will take a while
fi

# Run below to check there are no common lines between train and val
# if [[ ! -z $(comm -12 ImageSets/Segmentation/*) ]] ; then
#     info "WARNING: COMMON LINES IN TRAIN AND VAL"
# fi

### Now run VOC to TfRecord
info "[2/2] Now converting VOC -> TfRecord"

ls -ald "$VOC_DIR/JPEGImages" "$VOC_DIR/ImageSets/Segmentation" "$VOC_DIR/SegmentationClassRaw" "$LABELSET_DIR/tfrecord" 1>&2
# Check all dirs exist
if [ $? -ne 0 ]  ; then
  info "ERROR: There is a dir in the VOC structure that does not exist."
  exit 1
fi

CUDA_VISIBLE_DEVICES= python3 $DEEPLAB_DIR/datasets/build_voc2012_data.py \
    --image_folder "$VOC_DIR/JPEGImages" \
    --list_folder "$VOC_DIR/ImageSets/Segmentation" \
    --semantic_segmentation_folder "$VOC_DIR/SegmentationClassRaw" \
    --output_dir "$LABELSET_DIR/tfrecord" \
    --image_format "$IMAGE_FORMAT" --label_format png
