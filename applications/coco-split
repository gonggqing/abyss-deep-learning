#!/usr/bin/env python3
from __future__ import print_function
import argparse
import os
import sys
from pycocotools.coco import COCO
from abyss_deep_learning.coco_classes import CocoDataset

description = """

Split a COCO JSON database into multiple


"""

# todo
#   ? do not to output the split files into the same directory as the original file?
#     otherwise readonly directories become pain
#   ? make sure labels are balanced in the selected ratios (mind that two labels may refer to the same image)

def main(args):
    coco_dir = os.path.dirname(args.coco_path)
    coco_name = '.'.join(os.path.basename(args.coco_path).split('.')[0:-1])
    if args.verbose: print("loading {:s}".format(args.coco_path), file=sys.stderr)
    if not os.path.exists(args.coco_path): print( "coco-split: file not found: '" + args.coco_path + '"', file=sys.stderr); sys.exit(1)
    split_names = args.split_names.split(',')
    split_ratios = [1.0/len(split_names)]*len(split_names) if args.split_ratios is None or len(args.split_ratios) == 0 \
                   else (float(i) for i in args.split_ratios.split(','))
    database = CocoDataset.from_COCO(COCO(args.coco_path), image_dir=args.image_dir, limit_images=args.limit)
    for dataset_split, split_name in zip(database.split(split_ratios), split_names):
        split_path = os.path.join(coco_dir, "{:s}.{:s}.json".format(coco_name, split_name))
        if args.verbose:
            print(
                "coco-split: writing: {:s} with {:d} images and {:d} annotations"
                .format(split_path, len(dataset_split.images), len(dataset_split.annotations), file=sys.stderr)
            )
        dataset_split.save(split_path)

def get_args():
    parser = argparse.ArgumentParser(description=description, formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('coco_path', help="Path to the coco JSON.")
    parser.add_argument('split_names', help="CSV-delimited names of the splits, e.g: coco-split a.json 'x,y' ... yields a.x.json, a.y.json")
    parser.add_argument("--image-dir", help="If images referenced relatively, give the image dir", default=None)
    parser.add_argument("--limit", help="Limit the amount of images to read from the dataset before splitting", default=None, type=int)
    parser.add_argument("--split-ratios", "--ratios", type=str, help="CSV-delimited ratios of the splits (0.0 to 1.0); if absent, equal ratios")
    parser.add_argument('--verbose', action='store_true', help="more verbose output to stderr")
    return parser.parse_args()

if __name__ == '__main__': main(get_args())
